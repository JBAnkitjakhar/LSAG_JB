/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VotingRegistrationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emailToPublicKey"
      | "generateKeys"
      | "generatedEmails"
      | "getAllPublicKeys"
      | "getGeneratedEmails"
      | "getPublicKeyByEmail"
      | "hasGeneratedKeys"
      | "hasSubmittedKey"
      | "registrationEndTime"
      | "submitPublicKey"
      | "submittedPublicKeys"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "KeysGenerated" | "PublicKeySubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emailToPublicKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "generateKeys",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "generatedEmails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPublicKeys",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGeneratedEmails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicKeyByEmail",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGeneratedKeys",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSubmittedKey",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitPublicKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submittedPublicKeys",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "emailToPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generatedEmails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPublicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGeneratedEmails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicKeyByEmail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasGeneratedKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasSubmittedKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submittedPublicKeys",
    data: BytesLike
  ): Result;
}

export namespace KeysGeneratedEvent {
  export type InputTuple = [email: string];
  export type OutputTuple = [email: string];
  export interface OutputObject {
    email: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicKeySubmittedEvent {
  export type InputTuple = [email: string, publicKey: string];
  export type OutputTuple = [email: string, publicKey: string];
  export interface OutputObject {
    email: string;
    publicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingRegistration extends BaseContract {
  connect(runner?: ContractRunner | null): VotingRegistration;
  waitForDeployment(): Promise<this>;

  interface: VotingRegistrationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emailToPublicKey: TypedContractMethod<[arg0: string], [string], "view">;

  generateKeys: TypedContractMethod<[email: string], [void], "nonpayable">;

  generatedEmails: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAllPublicKeys: TypedContractMethod<[], [string[]], "view">;

  getGeneratedEmails: TypedContractMethod<[], [string[]], "view">;

  getPublicKeyByEmail: TypedContractMethod<[email: string], [string], "view">;

  hasGeneratedKeys: TypedContractMethod<[arg0: string], [boolean], "view">;

  hasSubmittedKey: TypedContractMethod<[arg0: string], [boolean], "view">;

  registrationEndTime: TypedContractMethod<[], [bigint], "view">;

  submitPublicKey: TypedContractMethod<
    [email: string, publicKey: string],
    [void],
    "nonpayable"
  >;

  submittedPublicKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emailToPublicKey"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "generateKeys"
  ): TypedContractMethod<[email: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "generatedEmails"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAllPublicKeys"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getGeneratedEmails"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPublicKeyByEmail"
  ): TypedContractMethod<[email: string], [string], "view">;
  getFunction(
    nameOrSignature: "hasGeneratedKeys"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasSubmittedKey"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "registrationEndTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitPublicKey"
  ): TypedContractMethod<
    [email: string, publicKey: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submittedPublicKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getEvent(
    key: "KeysGenerated"
  ): TypedContractEvent<
    KeysGeneratedEvent.InputTuple,
    KeysGeneratedEvent.OutputTuple,
    KeysGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "PublicKeySubmitted"
  ): TypedContractEvent<
    PublicKeySubmittedEvent.InputTuple,
    PublicKeySubmittedEvent.OutputTuple,
    PublicKeySubmittedEvent.OutputObject
  >;

  filters: {
    "KeysGenerated(string)": TypedContractEvent<
      KeysGeneratedEvent.InputTuple,
      KeysGeneratedEvent.OutputTuple,
      KeysGeneratedEvent.OutputObject
    >;
    KeysGenerated: TypedContractEvent<
      KeysGeneratedEvent.InputTuple,
      KeysGeneratedEvent.OutputTuple,
      KeysGeneratedEvent.OutputObject
    >;

    "PublicKeySubmitted(string,string)": TypedContractEvent<
      PublicKeySubmittedEvent.InputTuple,
      PublicKeySubmittedEvent.OutputTuple,
      PublicKeySubmittedEvent.OutputObject
    >;
    PublicKeySubmitted: TypedContractEvent<
      PublicKeySubmittedEvent.InputTuple,
      PublicKeySubmittedEvent.OutputTuple,
      PublicKeySubmittedEvent.OutputObject
    >;
  };
}
